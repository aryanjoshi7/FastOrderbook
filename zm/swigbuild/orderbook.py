# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _orderbook
else:
    import _orderbook

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _orderbook.delete_SwigPyIterator

    def value(self):
        return _orderbook.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _orderbook.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _orderbook.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _orderbook.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _orderbook.SwigPyIterator_equal(self, x)

    def copy(self):
        return _orderbook.SwigPyIterator_copy(self)

    def next(self):
        return _orderbook.SwigPyIterator_next(self)

    def __next__(self):
        return _orderbook.SwigPyIterator___next__(self)

    def previous(self):
        return _orderbook.SwigPyIterator_previous(self)

    def advance(self, n):
        return _orderbook.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _orderbook.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _orderbook.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _orderbook.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _orderbook.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _orderbook.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _orderbook.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _orderbook:
_orderbook.SwigPyIterator_swigregister(SwigPyIterator)

class float_vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _orderbook.float_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _orderbook.float_vector___nonzero__(self)

    def __bool__(self):
        return _orderbook.float_vector___bool__(self)

    def __len__(self):
        return _orderbook.float_vector___len__(self)

    def __getslice__(self, i, j):
        return _orderbook.float_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _orderbook.float_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _orderbook.float_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _orderbook.float_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _orderbook.float_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _orderbook.float_vector___setitem__(self, *args)

    def pop(self):
        return _orderbook.float_vector_pop(self)

    def append(self, x):
        return _orderbook.float_vector_append(self, x)

    def empty(self):
        return _orderbook.float_vector_empty(self)

    def size(self):
        return _orderbook.float_vector_size(self)

    def swap(self, v):
        return _orderbook.float_vector_swap(self, v)

    def begin(self):
        return _orderbook.float_vector_begin(self)

    def end(self):
        return _orderbook.float_vector_end(self)

    def rbegin(self):
        return _orderbook.float_vector_rbegin(self)

    def rend(self):
        return _orderbook.float_vector_rend(self)

    def clear(self):
        return _orderbook.float_vector_clear(self)

    def get_allocator(self):
        return _orderbook.float_vector_get_allocator(self)

    def pop_back(self):
        return _orderbook.float_vector_pop_back(self)

    def erase(self, *args):
        return _orderbook.float_vector_erase(self, *args)

    def __init__(self, *args):
        _orderbook.float_vector_swiginit(self, _orderbook.new_float_vector(*args))

    def push_back(self, x):
        return _orderbook.float_vector_push_back(self, x)

    def front(self):
        return _orderbook.float_vector_front(self)

    def back(self):
        return _orderbook.float_vector_back(self)

    def assign(self, n, x):
        return _orderbook.float_vector_assign(self, n, x)

    def resize(self, *args):
        return _orderbook.float_vector_resize(self, *args)

    def insert(self, *args):
        return _orderbook.float_vector_insert(self, *args)

    def reserve(self, n):
        return _orderbook.float_vector_reserve(self, n)

    def capacity(self):
        return _orderbook.float_vector_capacity(self)
    __swig_destroy__ = _orderbook.delete_float_vector

# Register float_vector in _orderbook:
_orderbook.float_vector_swigregister(float_vector)

class pair_thing(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _orderbook.pair_thing_swiginit(self, _orderbook.new_pair_thing(*args))
    first = property(_orderbook.pair_thing_first_get, _orderbook.pair_thing_first_set)
    second = property(_orderbook.pair_thing_second_get, _orderbook.pair_thing_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _orderbook.delete_pair_thing

# Register pair_thing in _orderbook:
_orderbook.pair_thing_swigregister(pair_thing)

class idk(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _orderbook.idk_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _orderbook.idk___nonzero__(self)

    def __bool__(self):
        return _orderbook.idk___bool__(self)

    def __len__(self):
        return _orderbook.idk___len__(self)

    def __getslice__(self, i, j):
        return _orderbook.idk___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _orderbook.idk___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _orderbook.idk___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _orderbook.idk___delitem__(self, *args)

    def __getitem__(self, *args):
        return _orderbook.idk___getitem__(self, *args)

    def __setitem__(self, *args):
        return _orderbook.idk___setitem__(self, *args)

    def pop(self):
        return _orderbook.idk_pop(self)

    def append(self, x):
        return _orderbook.idk_append(self, x)

    def empty(self):
        return _orderbook.idk_empty(self)

    def size(self):
        return _orderbook.idk_size(self)

    def swap(self, v):
        return _orderbook.idk_swap(self, v)

    def begin(self):
        return _orderbook.idk_begin(self)

    def end(self):
        return _orderbook.idk_end(self)

    def rbegin(self):
        return _orderbook.idk_rbegin(self)

    def rend(self):
        return _orderbook.idk_rend(self)

    def clear(self):
        return _orderbook.idk_clear(self)

    def get_allocator(self):
        return _orderbook.idk_get_allocator(self)

    def pop_back(self):
        return _orderbook.idk_pop_back(self)

    def erase(self, *args):
        return _orderbook.idk_erase(self, *args)

    def __init__(self, *args):
        _orderbook.idk_swiginit(self, _orderbook.new_idk(*args))

    def push_back(self, x):
        return _orderbook.idk_push_back(self, x)

    def front(self):
        return _orderbook.idk_front(self)

    def back(self):
        return _orderbook.idk_back(self)

    def assign(self, n, x):
        return _orderbook.idk_assign(self, n, x)

    def resize(self, *args):
        return _orderbook.idk_resize(self, *args)

    def insert(self, *args):
        return _orderbook.idk_insert(self, *args)

    def reserve(self, n):
        return _orderbook.idk_reserve(self, n)

    def capacity(self):
        return _orderbook.idk_capacity(self)
    __swig_destroy__ = _orderbook.delete_idk

# Register idk in _orderbook:
_orderbook.idk_swigregister(idk)

class Order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bid = property(_orderbook.Order_bid_get, _orderbook.Order_bid_set)
    id = property(_orderbook.Order_id_get, _orderbook.Order_id_set)
    volume = property(_orderbook.Order_volume_get, _orderbook.Order_volume_set)
    price = property(_orderbook.Order_price_get, _orderbook.Order_price_set)
    before = property(_orderbook.Order_before_get, _orderbook.Order_before_set)
    next = property(_orderbook.Order_next_get, _orderbook.Order_next_set)

    def __init__(self, i, v, p, b):
        _orderbook.Order_swiginit(self, _orderbook.new_Order(i, v, p, b))
    __swig_destroy__ = _orderbook.delete_Order

# Register Order in _orderbook:
_orderbook.Order_swigregister(Order)

class Limit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    volume = property(_orderbook.Limit_volume_get, _orderbook.Limit_volume_set)
    price = property(_orderbook.Limit_price_get, _orderbook.Limit_price_set)

    def append_order(self, order):
        return _orderbook.Limit_append_order(self, order)

    def cancel_order(self, order):
        return _orderbook.Limit_cancel_order(self, order)

    def pop_front(self, volume_pop, id_to_order):
        return _orderbook.Limit_pop_front(self, volume_pop, id_to_order)

    def __init__(self):
        _orderbook.Limit_swiginit(self, _orderbook.new_Limit())
    __swig_destroy__ = _orderbook.delete_Limit

# Register Limit in _orderbook:
_orderbook.Limit_swigregister(Limit)

class Orderbook(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mark = property(_orderbook.Orderbook_mark_get, _orderbook.Orderbook_mark_set)
    marks = property(_orderbook.Orderbook_marks_get, _orderbook.Orderbook_marks_set)

    def add_order(self, i, v, p, bid):
        return _orderbook.Orderbook_add_order(self, i, v, p, bid)

    def remove_order(self, id):
        return _orderbook.Orderbook_remove_order(self, id)

    def ask_map(self):
        return _orderbook.Orderbook_ask_map(self)

    def bid_map(self):
        return _orderbook.Orderbook_bid_map(self)

    def execute(self):
        return _orderbook.Orderbook_execute(self)

    def __init__(self):
        _orderbook.Orderbook_swiginit(self, _orderbook.new_Orderbook())
    __swig_destroy__ = _orderbook.delete_Orderbook

# Register Orderbook in _orderbook:
_orderbook.Orderbook_swigregister(Orderbook)



