# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _example
else:
    import _example

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class Order(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bid = property(_example.Order_bid_get, _example.Order_bid_set)
    id = property(_example.Order_id_get, _example.Order_id_set)
    volume = property(_example.Order_volume_get, _example.Order_volume_set)
    price = property(_example.Order_price_get, _example.Order_price_set)
    before = property(_example.Order_before_get, _example.Order_before_set)
    next = property(_example.Order_next_get, _example.Order_next_set)

    def __init__(self, i, v, p, b):
        _example.Order_swiginit(self, _example.new_Order(i, v, p, b))
    __swig_destroy__ = _example.delete_Order

# Register Order in _example:
_example.Order_swigregister(Order)

class Limit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    volume = property(_example.Limit_volume_get, _example.Limit_volume_set)
    price = property(_example.Limit_price_get, _example.Limit_price_set)

    def append_order(self, order):
        return _example.Limit_append_order(self, order)

    def cancel_order(self, order):
        return _example.Limit_cancel_order(self, order)

    def pop_front(self, volume_pop, id_to_order):
        return _example.Limit_pop_front(self, volume_pop, id_to_order)

    def __init__(self):
        _example.Limit_swiginit(self, _example.new_Limit())
    __swig_destroy__ = _example.delete_Limit

# Register Limit in _example:
_example.Limit_swigregister(Limit)

class Orderbook(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    mark = property(_example.Orderbook_mark_get, _example.Orderbook_mark_set)
    marks = property(_example.Orderbook_marks_get, _example.Orderbook_marks_set)

    def add_order(self, i, v, p, bid):
        return _example.Orderbook_add_order(self, i, v, p, bid)

    def remove_order(self, id):
        return _example.Orderbook_remove_order(self, id)

    def execute(self):
        return _example.Orderbook_execute(self)

    def __init__(self):
        _example.Orderbook_swiginit(self, _example.new_Orderbook())
    __swig_destroy__ = _example.delete_Orderbook

# Register Orderbook in _example:
_example.Orderbook_swigregister(Orderbook)



